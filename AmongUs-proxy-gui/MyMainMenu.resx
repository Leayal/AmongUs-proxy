<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAq3v//Kt7//yrf//8nzOr/Bycs/wMACP8qB3D/NAmK/zMJiP8zCYj/MwmI/zMJiP8zCYj/MwmI/zMJ
        iP8zCYj/MwmI/zMJiP8zCYj/MwmI/zMJiP8zCYj/NAmK/yoHcP8DAQn/CgIc/ygHbP8qB3D/HAVL/wEA
        Av8MQUr/Kdf3/yre//8q3v//KuD//yO30v8DERL/CQEY/y8Ifv8zCYn/MwmI/zMJh/8zCYf/MwmI/zMJ
        if8zCYn/MwmI/zMJh/8zCYb/MwmH/zMJiP8zCYj/MwmI/zMJiP80CYn/Kwhz/wQBCv8LAh3/MQmD/zQJ
        i/8wCIH/CgAa/wQWGP8jvNf/Kt7//yre//8r4f//HqG5/wAGBf8RAy3/MgmG/zMJh/8yCYv/LA2k/yYQ
        u/8iEsn/IBLP/yASzv8iEcf/JBDA/ycPtf8tDKD/MQqO/zMJh/8zCYj/MwmI/zQJif8rCHP/BAEL/wgB
        Fv8vCH3/MwmJ/zIJhv8QAyr/AAMC/x2Xrv8q3v//Kt7//yvi//8bj6X/AAEA/xgEQf80CYn/MAuV/yES
        zP8YFu3/Fxfz/xcX9P8XF/T/Fxf0/xcX9P8XF/T/Fxfz/xkW7P8eFNj/LQyf/zMJh/8zCYj/NAmJ/ysI
        c/8EAQv/BwES/y4Iev8zCYn/MwmI/xUEN/8AAAD/F3eJ/yre//8q3v//K+L//xmDl/8AAAD/HQVO/zIK
        kv8fE9L/Fxf0/xcX8v8XF/L/Fxfy/xcX8v8XF/L/Fxfy/xcX8v8XF/L/Fxfy/xYX9P8dFNz/MAqT/zMJ
        h/8zCYn/LAh1/wUBDf8FAQ7/LAh2/zMJif80CYr/GARA/wAAAP8SYnD/Kt7//yre//8r4v//F3qM/wAA
        AP8fBU//KQ+z/xcX8f8XF/L/Fxfy/xcX8v8XF/L/Fxfy/xcX8v8XF/L/Fxfy/xcX8v8XF/L/Fxfy/xcX
        8v8nD7b/MwmH/zMJif8sCHb/BQEO/wQBC/8rCHP/NAmJ/zQJiv8aBUb/AAAA/xFYZf8q3v//Kt7//yvh
        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
        //8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//KuD//yjS
        8f8VbH3/AgoM/wAAAP8AAAD/AwMe/wkJXP8NDYf/Dg6Q/w0Njf8NDYn/Cwtw/wUFMP8AAAL/AAAA/wxC
        S/8nzu3/Kt///yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt///yrc/P8clav/CCsx/wABAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wIJ
        Cv8QVGH/JcXj/yrg//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//Kt7//yrg//8myOb/GYaa/w5KVf8IKjH/ByMo/wckKv8HJy3/CCwy/wkx
        OP8PUV3/Hp20/ynY+P8q4P//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yrf//8r4f//Kdv7/yfP7v8myuj/Jsvp/yfN
        6/8n0O//KNPz/yrc/f8r4f//Kt///yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt///yrf
        //8q3///Kt///yrf//8q3///Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre//8q3v//Kt7//yre
        //8q3v//Kt7//yre//8q3v//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>